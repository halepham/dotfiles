#!/bin/bash

# some more ls aliases
alias ls=$'ls --group-directories-first --color=auto --time-style="+\e[32m%Y-%m-%d \e[35m%k:%M\e[m"'
alias ll='ls -lhF'
alias lla='ls -AlhF'
alias la='ls -AF'
alias l='ls -CF'

# aliases add by user
alias lt='ls -AlFht'

alias h='history'

alias dt="date '+%A %B %d %Y %H:%M:%S'"

alias df='df -Th'

alias du='du -h'
alias dul='du --max-depth 1 | sort -rh | head'

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

alias vi='vim'
alias vim='nvim'

alias rlb='source ~/.bashrc'
alias vib='vim ~/.bashrc'
alias vips='vim ~/.bash/prompt'
alias vial='vim ~/.bash/aliases'
alias vipr='vim ~/.bash/profile'
alias viv='vim ~/.config/nvim/init.vim'

# 256 colors
256tab() {
    curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ | bash
}

### git + FZF ###
is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

# fco - checkout git branch/tag
fco() {
    local tags branches target
    is_in_git_repo || return
    tags=$(                                         \
        git tag                                     |
        awk '{print "\x1b[31;1mtag\x1b[m\t" $1}'    \
    ) || return
    branches=$(                                     \
        git branch --all                            |
        grep -v HEAD                                |
        sed "s/.* //"                               |
        sed "s#remotes/[^/]*/##"                    |
        sort -u                                     |
        awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}' \
    ) || return
    target=$(                                       \
        (echo "$tags"; echo "$branches")            |
        sed '/^$/d'                                 |
        fzf --no-hscroll                            \
            --height 50%                            \
            --border                                \
            --reverse                               \
            --ansi                                  \
            +m                                      \
            -d "\t"                                 \
            -n 2                                    \
            -q "$*"                                 \
    ) || return
    git checkout $(echo "$target" | awk '{print $2}')
}

# gf - git diff
gf() {
    is_in_git_repo || return
    git -c color.status=always                                               \
        status                                                               \
        --short                                                              |
    fzf -m                                                                   \
        --ansi                                                               \
        --nth 2..,..                                                         \
        --preview '(git diff --color=always -- {-1} | sed 1,4d) | head -500' |
    cut -c4- | sed 's/.* -> //'
}

# gh - git log
gh() {
    is_in_git_repo || return
    git log --date=short                                          \
            --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" \
            --graph                                               \
            --color=always                                        |
    fzf --ansi                                                    \
        --no-sort                                                 \
        --reverse                                                 \
        --multi                                                   \
        --preview 'grep -o "[a-f0-9]\{7,\}" <<< {}                |
                   xargs git show --color=always                  |
                   head -200'                                     |
    rg -o "[a-f0-9]\{7,\}"
}

### FZF ###
_fzf_compgen_path() {
    $FZF_DEFAULT_COMMAND . "$1"
}
_fzf_compgen_dir() {
    $FZF_DEFAULT_COMMAND --type d . "$1"
}

#fzf open file
fe() {
    fzf --height 80%                                       \
        --reverse                                          \
        --ansi                                             \
        -q "$1"                                            \
        --preview '([[ -f {} ]] && cat {}) ||              \
                   ([[ -d {} ]] && (tree -C {} | less)) || \
                   echo {} 2> /dev/null | head -200'
}

# find-in-file - usage: fif <SEARCH_TERM>
fif() {
    if [ ! "$#" -gt 0 ]; then
        echo "Need a string to search for!"
        return 1
    fi
    rg --files-with-matches          \
       --hidden                      \
       --follow                      \
       --glob "!.git/*"              \
       --smart-case                  \
       --no-messages                 \
       "$1"                          |
    fzf $FZF_PREVIEW_WINDOW          \
        --preview "rg --smart-case   \
                      --pretty       \
                      --context 5    \
                      '$1' {}"
}
