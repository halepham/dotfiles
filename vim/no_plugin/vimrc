""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           reset vimrc augroup                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" We reset the vimrc augroup. Autocommands are added to this group throughout
" the file
augroup vimrc
  au!
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         turn on filetype plugins                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable detection, plugins and indenting in one step
" This needs to come AFTER the Plugin commands!
if has("autocmd")
    filetype plugin indent on
endif
if has("syntax") && !exists("g:syntax_on")
    syntax enable
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General settings                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8

" Theme "
syntax enable
set nocompatible
set t_Co=256
set background=dark

" Enable true color
if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
    set termguicolors
endif

" hide cursor line when focus in on other window
" https://stackoverflow.com/questions/14068751/how-to-hide-cursor-line-when-focus-in-on-other-window-in-vim
" Set colorscheme after VimEnter
" https://www.reddit.com/r/neovim/comments/8lt2ot/colorscheme_not_loading_from_vimrc/dzk1l0e/
augroup CursorLine
    au!
    au VimEnter     * setlocal cursorline
    au WinEnter     * setlocal cursorline
    au BufWinEnter  * setlocal cursorline
    au WinLeave     * setlocal nocursorline
augroup END

" Colorscheme
let g:edge_style = 'neon'
let g:edge_disable_italic_comment = 0
let g:edge_lightline_disable_bold = 1
colorscheme edge

" Display settings "
set scrolloff=4     " 4 lines above/below cursor when scrolling
set sidescrolloff=5 " 5 cols left/right cursor when scrolling
" set showmatch     " show matching bracket (briefly jump)
" set showcmd       " show typed command in status bar
set ruler           " show cursor position in status bar
set title         " show file in titlebar
set cursorline      " highlights the current line
set number          " Display line number
set relativenumber  " show the distance to that line

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,full
set wildmenu            " completion with menu

" Search configuration
set ignorecase      " ignore case when searching
set smartcase       " turn on smartcase

" Editor settings "
" set showtabline=2
set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set incsearch
set tabstop=4       " number of spaces a tab counts for
set shiftwidth=4    " spaces for autoindents
set softtabstop=4
set shiftround      " makes indenting a multiple of shiftwidth
set expandtab       " turn a tab into spaces
set laststatus=2    " the statusline is now always shown
" set noshowmode      " don't show the mode ("-- INSERT --") at the bottom

" Misc settings "
set hidden              " allows making buffers hidden even with unsaved changes
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set autoread            " auto read when a file is changed from the outside
set foldlevelstart=99   " all folds open by default
if has('mouse')
    set mouse=a                 " enables the mouse in all modes
    set mousemodel=popup_setpos " right-click on selection should show up a menu
endif

" Give more space for displaying messages.
set cmdheight=1

" no backup file
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" toggles vim's paste mode; when we want to paste something into vim from a
" different application, turning on paste mode prevents the insertion of extra
" whitespace
set pastetoggle=<F7>

" Width of a line "
set textwidth=120
set colorcolumn=+1

" This limits the size of the max number of items to show in Vim's popup menu
set pumheight=10
set splitbelow
set splitright

if has('unnamedplus')
    " By default, Vim will not use the system clipboard when yanking/pasting to
    " the default register. This option makes Vim use the system default
    " clipboard.
    " Note that on X11, there are _two_ system clipboards: the "standard" one, and
    " the selection/mouse-middle-click one. Vim sees the standard one as register
    " '+' (and this option makes Vim use it by default) and the selection one as
    " '*'.
    " See :h 'clipboard' for details.
    set clipboard=unnamedplus,unnamed
else
    " Vim now also uses the selection system clipboard for default yank/paste.
    set clipboard+=unnamed
endif

" When opening a file, go to the last position we were on
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
            \ exe "normal! g`\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              custom mappings                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Export $MYVIMRC to set neovim init is sourced
let $MYVIMRC='~/.config/nvim/init.vim'

" Fast saving
nnoremap <leader>w :w!<cr>

" This command will allow us to save a file we don't have permission to save
" *after* we have already opened it. Super useful.
" cnoremap w!! w !sudo tee % >/dev/null
cnoremap w!! w suda://%

" <leader>v brings up .vimrc
" <leader>V reloads it and makes all changes active (file has to be saved first)
noremap <leader>v :e! $MYVIMRC<CR>
noremap <leader>V :source $MYVIMRC<CR>:filetype detect<CR>
            \ :exe ":echo 'vimrc reloaded'"<CR>

" These create newlines like o and O but stay in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

" Move cursor by display lines when wrapping
nnoremap j      gj
nnoremap k      gk
vnoremap j      gj
vnoremap k      gk
nnoremap <Down> gj
nnoremap <Up>   gk
vnoremap <Down> gj
vnoremap <Up>   gk
inoremap <Down> <C-o>gj
inoremap <Up>   <C-o>gk

" for faster scrolling
noremap <c-d> 15gj
noremap <c-u> 15gk

" This is quit one file
noremap ;q :q<cr>
" This is quit one file without save
noremap ;Q :q!<cr>
" This is quit all
noremap <leader>q :qa<cr>
" and quit all without save
noremap <leader>Q :qa!<cr>

" key bindings for quickly moving between windows
" w next, h left, l right, k up, j down
nnoremap <m-w> <C-w>w
nnoremap <c-h> <C-w>h
nnoremap <c-j> <C-w>j
nnoremap <c-k> <C-w>k
nnoremap <c-l> <C-w>l

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

" TABs to switch files
nmap <leader>t :tabnext<CR>
nmap <leader>0 :tablast<CR>
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt

" Let 'leader+[' toggle between this and the last accessed tab
let g:lasttab = 1
nnoremap <leader>` :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Resize window
nnoremap + <C-W>+
nnoremap - <C-W>-
nnoremap < <C-W><
nnoremap > <C-W>>

" No highlight
map <F4> :noh<CR>

" Fix syntax highlighting breaks for big file after jump or search
set redrawtime=10000
map <F6> :syntax sync fromstart<CR>
